generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlatformAdmin {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Owner {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  properties   Property[]
  subscription Subscription?
  tenants      Tenant[]
}

model Tenant {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique
  ownerId    Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  contracts  Contract[]
  invoices   Invoice[]
  properties Property[]
  owner      Owner      @relation(fields: [ownerId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  units      Unit[]
}

model Property {
  id        Int          @id @default(autoincrement())
  name      String
  type      PropertyType
  ownerId   Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tenantId  Int?
  contracts Contract[]
  owner     Owner        @relation(fields: [ownerId], references: [id])
  Tenant    Tenant?      @relation(fields: [tenantId], references: [id])
  services  Service[]
  units     Unit[]
}

model Unit {
  id                 Int                  @id @default(autoincrement())
  type               UnitType
  propertyId         Int
  contractId         Int?                 @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  tenantId           Int?
  MaintenanceRequest MaintenanceRequest[]
  Rental             Rental[]
  services           Service[]
  contract           Contract[]
  property           Property             @relation(fields: [propertyId], references: [id])
  Tenant             Tenant?              @relation(fields: [tenantId], references: [id])
}

model Contract {
  id         Int        @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  terms      String
  propertyId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   Int?
  property   Property   @relation(fields: [propertyId], references: [id])
  Tenant     Tenant?    @relation(fields: [tenantId], references: [id])
  documents  Document[]
  unit       Unit       @relation(fields: [unitId], references: [id])
  unitId     Int        @unique // Permite que unitId sea opcional en caso de que no todos los contratos requieran unidad
}

model Document {
  id         Int      @id @default(autoincrement())
  fileName   String
  fileUrl    String
  contractId Int
  createdAt  DateTime @default(now())
  contract   Contract @relation(fields: [contractId], references: [id])
}

model Service {
  id         Int       @id @default(autoincrement())
  name       String
  included   Boolean
  propertyId Int?
  unitId     Int?
  Property   Property? @relation(fields: [propertyId], references: [id])
  Unit       Unit?     @relation(fields: [unitId], references: [id])
}

model Invoice {
  id             Int           @id @default(autoincrement())
  amount         Float
  dueDate        DateTime
  paid           Boolean       @default(false)
  tenantId       Int
  subscriptionId Int?
  createdAt      DateTime      @default(now())
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  tenant         Tenant        @relation(fields: [tenantId], references: [id])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  plan      Plan
  ownerId   Int       @unique
  startDate DateTime
  endDate   DateTime
  active    Boolean   @default(true)
  Invoice   Invoice[]
  owner     Owner     @relation(fields: [ownerId], references: [id])
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  password           String
  role               RoleType
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ownerId            Int?
  tenantId           Int?
  MaintenanceRequest MaintenanceRequest[]
  owner              Owner?
  Payment            Payment[]
  PlatformAdmin      PlatformAdmin[]
  Rental             Rental[]
  tenant             Tenant?
}

model Rental {
  id         Int       @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  unitId     Int
  tenantId   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  payments   Payment[]
  tenant     User      @relation(fields: [tenantId], references: [id])
  apartment  Unit      @relation(fields: [unitId], references: [id])
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Float
  paymentDate DateTime @default(now())
  rentalId    Int
  tenantId    Int
  rental      Rental   @relation(fields: [rentalId], references: [id])
  tenant      User     @relation(fields: [tenantId], references: [id])
}

model MaintenanceRequest {
  id          Int               @id @default(autoincrement())
  description String
  status      MaintenanceStatus @default(PENDING)
  unitId      Int
  tenantId    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  tenant      User              @relation(fields: [tenantId], references: [id])
  apartment   Unit              @relation(fields: [unitId], references: [id])
}

enum PropertyType {
  HOUSE
  BUILDING
  COMMERCIAL
  MIXED
}

enum UnitType {
  APARTMENT
  LOCAL
  GARAGE
  ROOM
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Plan {
  BASIC
  PRO
  PREMIUM
}

enum RoleType {
  PLATFORM_ADMIN
  OWNER
  OWNER_ADMIN
  TENANT
}
